options {
  STATIC=false;
  MULTI=false;
  NODE_PREFIX="Atl";
  NODE_PACKAGE="org.lmind.atl.core.ast";
  NODE_FACTORY="AtlNodeFactory";
  NODE_CLASS="AtlNode";
  BUILD_NODE_FILES=false;
  TRACK_TOKENS=true;
}

PARSER_BEGIN(AtlParser)
package org.lmind.atl.core.ast;

/** Simple brace matcher. */
public class AtlParser {


}

PARSER_END(AtlParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : /* LITERALS */
{
  < TEXT: <TEXT_NODE> (<TEXT_NODE>)* >
|
  < #TEXT_NODE: (<STRING_LITERAL> | <TEXT_LITERAL>) >
|
  < #STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\" ~["\n","\r"])
      )*
      "\""
  >
|
  < #TEXT_LITERAL:
      ~["\"", "@", "#"] (~["\"", "@", "#"])*
  >
}

TOKEN :
{
  < DOMAIN: "@" <IDENTIFIER> (":" <IDENTIFIER>)? >
|
  < #IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039"
      ]
  >
}

AtlNode Body():
{}
{
  Directives()
  { return jjtThis; }
}

AtlNode Directives() :
{}
{
  Domain() DirectivesBody() "#"
  { return jjtThis; }
}

void Domain() :
{
  Token t;
}
{
  t=<DOMAIN>
  {
    jjtThis.setImage(t.image);
  }
}

void DirectivesBody() :
{
  Token t;
}
{
  t=<TEXT>
  {
    jjtThis.setImage(t.image);
  }
}

