/* Generated By:JJTree&JavaCC: Do not edit this line. JelParserConstants.java */
package org.lmind.jel.core.ast;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JelParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ABSTRACT = 5;
  /** RegularExpression Id. */
  int BOOLEAN = 6;
  /** RegularExpression Id. */
  int BREAK = 7;
  /** RegularExpression Id. */
  int BYTE = 8;
  /** RegularExpression Id. */
  int CASE = 9;
  /** RegularExpression Id. */
  int CATCH = 10;
  /** RegularExpression Id. */
  int CHAR = 11;
  /** RegularExpression Id. */
  int CLASS = 12;
  /** RegularExpression Id. */
  int CONST = 13;
  /** RegularExpression Id. */
  int CONTINUE = 14;
  /** RegularExpression Id. */
  int _DEFAULT = 15;
  /** RegularExpression Id. */
  int DO = 16;
  /** RegularExpression Id. */
  int DOUBLE = 17;
  /** RegularExpression Id. */
  int ELSE = 18;
  /** RegularExpression Id. */
  int EXTENDS = 19;
  /** RegularExpression Id. */
  int FALSE = 20;
  /** RegularExpression Id. */
  int FINAL = 21;
  /** RegularExpression Id. */
  int FINALLY = 22;
  /** RegularExpression Id. */
  int FLOAT = 23;
  /** RegularExpression Id. */
  int FOR = 24;
  /** RegularExpression Id. */
  int GOTO = 25;
  /** RegularExpression Id. */
  int IF = 26;
  /** RegularExpression Id. */
  int IMPLEMENTS = 27;
  /** RegularExpression Id. */
  int IMPORT = 28;
  /** RegularExpression Id. */
  int INSTANCEOF = 29;
  /** RegularExpression Id. */
  int INT = 30;
  /** RegularExpression Id. */
  int INTERFACE = 31;
  /** RegularExpression Id. */
  int LONG = 32;
  /** RegularExpression Id. */
  int NATIVE = 33;
  /** RegularExpression Id. */
  int NEW = 34;
  /** RegularExpression Id. */
  int NULL = 35;
  /** RegularExpression Id. */
  int PACKAGE = 36;
  /** RegularExpression Id. */
  int PRIVATE = 37;
  /** RegularExpression Id. */
  int PROTECTED = 38;
  /** RegularExpression Id. */
  int PUBLIC = 39;
  /** RegularExpression Id. */
  int RETURN = 40;
  /** RegularExpression Id. */
  int SHORT = 41;
  /** RegularExpression Id. */
  int STATIC = 42;
  /** RegularExpression Id. */
  int SUPER = 43;
  /** RegularExpression Id. */
  int SWITCH = 44;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 45;
  /** RegularExpression Id. */
  int THIS = 46;
  /** RegularExpression Id. */
  int THROW = 47;
  /** RegularExpression Id. */
  int THROWS = 48;
  /** RegularExpression Id. */
  int TRANSIENT = 49;
  /** RegularExpression Id. */
  int TRUE = 50;
  /** RegularExpression Id. */
  int TRY = 51;
  /** RegularExpression Id. */
  int VOID = 52;
  /** RegularExpression Id. */
  int VOLATILE = 53;
  /** RegularExpression Id. */
  int WHILE = 54;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 55;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 56;
  /** RegularExpression Id. */
  int HEX_LITERAL = 57;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 58;
  /** RegularExpression Id. */
  int STRING_LITERAL = 59;
  /** RegularExpression Id. */
  int IDENTIFIER = 60;
  /** RegularExpression Id. */
  int LETTER = 61;
  /** RegularExpression Id. */
  int DIGIT = 62;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"abstract\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"[\"",
    "\",\"",
    "\"]\"",
    "\":\"",
    "\"?\"",
    "\"||\"",
    "\"&&\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"!\"",
    "\".\"",
    "\"(\"",
    "\")\"",
  };

}
